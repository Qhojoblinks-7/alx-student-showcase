import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { Button } from '../ui/button.jsx';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card.jsx';
import { Skeleton } from '../ui/skeleton.jsx';
import { Textarea } from '../ui/textarea.jsx';
import { Sparkle, Info, RefreshCw, MessageSquare, AlertCircle, Loader2 } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '../../lib/supabase.js'; // Import your existing Supabase client

/**
 * AIRecommendations component displays a list of AI-generated project recommendations.
 * It includes loading states, an explanation tooltip, and action buttons for regeneration/feedback.
 *
 * @param {object} props - Component props.
 * @param {Array<string>} props.recommendations - An array of strings, each representing a project recommendation.
 * @param {boolean} props.isLoading - Indicates if recommendations are currently being generated.
 * @param {function} props.onRegenerate - Callback function to trigger AI recommendations regeneration.
 * @param {string} props.userId - The ID of the current authenticated user.
 */
export function AIRecommendations({ recommendations, isLoading, onRegenerate, userId }) {
  const [showFeedbackInput, setShowFeedbackInput] = useState(false);
  const [feedbackText, setFeedbackText] = useState('');
  const [isSubmittingFeedback, setIsSubmittingFeedback] = useState(false);

  const handleFeedbackSubmit = async () => {
    if (!feedbackText.trim()) {
      toast.error('Please enter your feedback before submitting.');
      return;
    }

    if (!userId) {
      toast.error('User not authenticated. Cannot submit feedback.');
      return;
    }

    setIsSubmittingFeedback(true);
    try {
      // Directly insert feedback into the 'ai_feedback' table using the Supabase client
      const { data, error } = await supabase
        .from('ai_feedback')
        .insert([
          {
            user_id: userId,
            feedback_type: 'ai_recommendations', // Specific type for these recommendations
            feedback_text: feedbackText,
            context_data: recommendations, // Store the recommendations that were shown
          },
        ])
        .select(); // Select the inserted data to confirm success

      if (error) {
        console.error('Supabase feedback insert error:', error.message);
        throw new Error(error.message || 'Failed to submit feedback to Supabase.');
      }

      toast.success('Thank you for your feedback! It has been submitted.');
      setFeedbackText('');
      setShowFeedbackInput(false);
    } catch (error) {
      console.error('Error submitting feedback:', error);
      toast.error('Failed to submit feedback: ' + (error.message || 'Unknown error'));
    } finally {
      setIsSubmittingFeedback(false);
    }
  };

  const handleFeedbackCancel = () => {
    setFeedbackText('');
    setShowFeedbackInput(false);
  };

  return (
    <Card className="p-6 shadow-md rounded-lg bg-white dark:bg-gray-800 border border-gray-100 dark:border-gray-700">
      <CardHeader className="p-0 pb-2">
        <CardTitle className="text-2xl font-bold text-gray-900 dark:text-gray-50 flex items-center gap-2">
          <Sparkle className="h-6 w-6 text-blue-500" /> AI-Powered Project Recommendations
          <Info
            className="h-4 w-4 text-gray-400 ml-2 cursor-pointer"
            title="These recommendations are generated by AI based on your skills and interests to suggest potential future projects."
            aria-label="Information about AI-powered project recommendations"
          />
        </CardTitle>
      </CardHeader>
      <CardContent className="p-0 text-gray-700 dark:text-gray-300 leading-relaxed">
        {isLoading ? (
          <div className="space-y-2">
            <Skeleton className="h-4 w-full rounded-md" />
            <Skeleton className="h-4 w-5/6 rounded-md" />
            <Skeleton className="h-4 w-4/5 rounded-md" />
          </div>
        ) : recommendations && recommendations.length > 0 ? (
          <ul className="list-disc pl-5 space-y-2">
            {recommendations.map((rec, index) => (
              <li key={index}>{rec}</li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500 dark:text-gray-400 text-sm">No recommendations available. Fill in your skills and bio to get AI-powered project recommendations!</p>
        )}

        {showFeedbackInput ? (
          <div className="mt-4 space-y-2">
            <Textarea
              placeholder="Tell us what you think about these recommendations..."
              value={feedbackText}
              onChange={(e) => setFeedbackText(e.target.value)}
              rows={3}
              className="w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-blue-500 focus:border-blue-500"
              disabled={isSubmittingFeedback}
            />
            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleFeedbackCancel}
                disabled={isSubmittingFeedback}
                aria-label="Cancel feedback"
              >
                Cancel
              </Button>
              <Button
                size="sm"
                onClick={handleFeedbackSubmit}
                disabled={!feedbackText.trim() || isSubmittingFeedback}
                aria-label="Submit feedback"
              >
                {isSubmittingFeedback ? <Loader2 className="h-4 w-4 mr-1 animate-spin" /> : null}
                Submit Feedback
              </Button>
            </div>
          </div>
        ) : (
          <div className="flex justify-end mt-4 gap-2">
            <Button
              variant="ghost"
              size="sm"
              className="text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-500"
              onClick={onRegenerate}
              disabled={isLoading}
              aria-label="Regenerate AI project recommendations"
            >
              {isLoading ? <Loader2 className="h-4 w-4 mr-1 animate-spin" /> : <RefreshCw className="h-4 w-4 mr-1" />} Regenerate
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="text-gray-500 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-500"
              onClick={() => setShowFeedbackInput(true)} // Show feedback input
              aria-label="Give feedback on AI recommendations"
            >
              <MessageSquare className="h-4 w-4 mr-1" /> Feedback
            </Button>
          </div>
        )}
        <p className="text-xs text-gray-400 dark:text-gray-600 mt-2">
          <AlertCircle className="inline h-3 w-3 mr-1" aria-hidden="true" /> Powered by AI. Content may vary.
        </p>
      </CardContent>
    </Card>
  );
}

AIRecommendations.propTypes = {
  recommendations: PropTypes.arrayOf(PropTypes.string).isRequired,
  isLoading: PropTypes.bool.isRequired,
  onRegenerate: PropTypes.func.isRequired,
  userId: PropTypes.string, // userId is still needed to link feedback to a user
};
AIRecommendations.defaultProps = {
  recommendations: [],
  userId: null,
};
export default AIRecommendations;